---
name: Reusable - Deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      environment:
        description: "GitHub Environment (dev|qa|prd)"
        type: string
        required: true
      commit_sha:
        description: "SHA del commit para tag de imagen"
        type: string
        required: false

      # Opcionales; si faltan, se leen de vars.* del Environment
      azure_client_id:
        type: string
        required: false
      azure_tenant_id:
        type: string
        required: false
      azure_subscription_id:
        type: string
        required: false
      resource_group:
        type: string
        required: false
      aca_environment:
        type: string
        required: false
      location:
        type: string
        required: false
      app_name:
        type: string
        required: false
      image_ref:
        type: string
        required: false
      ingress:
        type: string
        required: false
      target_port:
        type: string
        required: false
      cpu:
        type: string
        required: false
      memory:
        type: string
        required: false
      min_replicas:
        type: string
        required: false
      max_replicas:
        type: string
        required: false
      extra_env:
        type: string
        required: false
      acr_login_server:
        type: string
        required: false
      acr_identity_client_id:
        description: "ClientId de la Managed Identity de la ACA (NO el App Registration de OIDC)"
        type: string
        required: false

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy ${{ inputs.environment }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: ${{ inputs.environment }}

    concurrency:
      group: aca-${{ inputs.environment }}-${{ inputs.commit_sha || github.sha }}
      cancel-in-progress: true

    steps:
      - name: Checkout (caller)
        uses: actions/checkout@v4

      # Lints no bloqueantes
      - name: Write .yamllint config
        run: |
          cat > .yamllint.yml <<'CFG'
          extends: default
          rules:
            document-start: { present: true }
            trailing-spaces: { level: error }
            new-line-at-end-of-file: { level: error }
            colons: disable
            braces: disable
            line-length: disable
            truthy: disable
            brackets: disable
            comments: disable
            indentation: disable
            empty-lines: disable
          CFG

      - name: yamllint (non-blocking)
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .github/workflows
          format: github
          strict: true
          no_warnings: false
        continue-on-error: true

      - name: actionlint (non-blocking)
        uses: rhysd/actionlint@v1.6.27
        continue-on-error: true

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ inputs.azure_client_id       || vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ inputs.azure_tenant_id       || vars.AZURE_TENANT_ID }}
          subscription-id: ${{ inputs.azure_subscription_id || vars.AZURE_SUBSCRIPTION_ID }}

      - name: Identidad OIDC (debug)
        run: |
          set -euo pipefail
          echo "↪ Cuenta de Azure activa:"
          az account show --query "{subscription:id, tenant:tenantId, user:user}" -o tsv || true
          echo "↪ SP objectId del App Registration (para RBAC):"
          az ad sp show --id "${{ inputs.azure_client_id || vars.AZURE_CLIENT_ID }}" --query id -o tsv || true

      - name: Resolver parámetros (fallback a vars.*)
        id: r
        run: |
          set -euo pipefail
          rg="${{ inputs.resource_group  || vars.AZ_RESOURCE_GROUP }}"
          aca_env="${{ inputs.aca_environment || vars.ACA_ENV_NAME }}"
          loc="${{ inputs.location       || vars.AZ_LOCATION }}"
          app="${{ inputs.app_name       || vars.APP_NAME }}"
          acr="${{ inputs.acr_login_server || vars.ACR_LOGIN_SERVER }}"
          sha="${{ inputs.commit_sha || github.sha }}"
          img="${{ inputs.image_ref || '' }}"
          if [ -z "$img" ]; then
            img="${acr}/${{ vars.IMAGE_NAME }}:sha-${sha}"
          fi
          {
            printf 'rg=%s\n' "$rg"
            printf 'aca_env=%s\n' "$aca_env"
            printf 'loc=%s\n' "$loc"
            printf 'app=%s\n' "$app"
            printf 'acr=%s\n' "$acr"
            printf 'image=%s\n' "$img"
          } >> "$GITHUB_OUTPUT"

      - name: Ensure Azure CLI + containerapp extension
        run: |
          set -euo pipefail
          az version
          if ! az extension show --name containerapp >/dev/null 2>&1; then
            az extension add --name containerapp -y
          else
            az extension update --name containerapp -y || true
          fi

      - name: Validar recursos existentes (no muta)
        env:
          RG: ${{ steps.r.outputs.rg }}
          ACA_ENV: ${{ steps.r.outputs.aca_env }}
          APP: ${{ steps.r.outputs.app }}
          ACR_LOGIN: ${{ steps.r.outputs.acr }}
        run: |
          set -euo pipefail
          az group show -n "$RG" -o none
          az containerapp env show -g "$RG" -n "$ACA_ENV" -o none
          az containerapp show -g "$RG" -n "$APP" -o none
          if [[ -n "${ACR_LOGIN:-}" ]]; then
            ACR_NAME="$ACR_LOGIN"
            ACR_NAME="${ACR_NAME%%.*}"
            az acr show -n "$ACR_NAME" -o none
          fi

      - name: Aplicar permisos de registry (idempotente, solo si se provee MI)
        if: ${{ inputs.acr_identity_client_id != '' }}
        env:
          RESOURCE_GROUP: ${{ steps.r.outputs.rg }}
          APP_NAME: ${{ steps.r.outputs.app }}
          ACR_LOGIN: ${{ steps.r.outputs.acr }}
          ACR_ID: ${{ inputs.acr_identity_client_id }}
        run: |
          set -euo pipefail
          if [ -n "${ACR_LOGIN:-}" ]; then
            az containerapp registry set \
              -g "$RESOURCE_GROUP" -n "$APP_NAME" \
              --server "$ACR_LOGIN" \
              --identity "$ACR_ID" \
              --yes || true
          fi

      - name: Update Container App (imagen + config)
        env:
          RESOURCE_GROUP: ${{ steps.r.outputs.rg }}
          APP_NAME: ${{ steps.r.outputs.app }}
          IMAGE_REF: ${{ steps.r.outputs.image }}
          INGRESS: ${{ inputs.ingress }}
          TARGET_PORT: ${{ inputs.target_port }}
          CPU: ${{ inputs.cpu }}
          MEMORY: ${{ inputs.memory }}
          MIN_REPLICAS: ${{ inputs.min_replicas }}
          MAX_REPLICAS: ${{ inputs.max_replicas }}
          EXTRA_ENV: ${{ inputs.extra_env }}
        run: |
          set -euo pipefail
          PARAMS=( -g "$RESOURCE_GROUP" -n "$APP_NAME" --image "$IMAGE_REF" )
          [ -n "${INGRESS:-}" ]      && PARAMS+=( --ingress "$INGRESS" )
          [ -n "${TARGET_PORT:-}" ]  && PARAMS+=( --target-port "$TARGET_PORT" )
          [ -n "${CPU:-}" ]          && PARAMS+=( --cpu "$CPU" )
          [ -n "${MEMORY:-}" ]       && PARAMS+=( --memory "$MEMORY" )
          [ -n "${MIN_REPLICAS:-}" ] && PARAMS+=( --min-replicas "$MIN_REPLICAS" )
          [ -n "${MAX_REPLICAS:-}" ] && PARAMS+=( --max-replicas "$MAX_REPLICAS" )
          if [ -n "${EXTRA_ENV:-}" ]; then
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              PARAMS+=( --set-env-vars "$line" )
            done <<< "$EXTRA_ENV"
          fi
          az containerapp update "${PARAMS[@]}"
          echo "✅ Deploy completado."
