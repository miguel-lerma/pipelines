name: Reusable - Deploy ACA

on:
  workflow_call:
    inputs:
      # --- Control del environment de GitHub (protecciones, reviewers, etc.) ---
      environment_name:
        description: "Environment name (e.g. dev, stage, prod)"
        required: true
        type: string

      # --- Azure context ---
      azure_client_id:
        description: "Azure AD App (Client) ID"
        required: true
        type: string
      azure_tenant_id:
        description: "Azure AD Tenant ID"
        required: true
        type: string
      azure_subscription_id:
        description: "Azure Subscription ID"
        required: true
        type: string

      # --- ACA destino ---
      aca_environment:
        required: true
        type: string
      resource_group:
        required: true
        type: string
      location:
        required: true
        type: string

      # --- ACR ---
      acr_name:
        required: true
        type: string
      acr_login_server:
        required: true
        type: string

      # --- App & contenedor ---
      app_name:
        required: true
        type: string
      image_ref:
        required: true
        type: string

      # --- Ingress/puertos ---
      ingress:
        required: true
        type: string
      target_port:
        required: true
        type: string

      # --- Escala & recursos ---
      cpu:
        required: true
        type: string
      memory:
        required: true
        type: string
      min_replicas:
        required: true
        type: string
      max_replicas:
        required: true
        type: string

      # --- Env vars adicionales (multi-line) ---
      extra_env:
        required: false
        type: string
        default: ""

    secrets: {} # No exigimos secretos; todo viene por inputs

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy ACA
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}

    steps:
      - name: Checkout repo caller (for metadata only)
        uses: actions/checkout@v4

      - name: Azure Login (OIDC, sin secretos)
        uses: azure/login@v1
        with:
          client-id:        ${{ inputs.azure_client_id }}
          tenant-id:        ${{ inputs.azure_tenant_id }}
          subscription-id:  ${{ inputs.azure_subscription_id }}

      - name: Ensure ACA environment exists
        run: |
          az extension add -n containerapp --yes
          az provider register --namespace Microsoft.App --wait
          # Crea el env si no existe
          if ! az containerapp env show -g "${{ inputs.resource_group }}" -n "${{ inputs.aca_environment }}" >/dev/null 2>&1; then
            az containerapp env create \
              -g "${{ inputs.resource_group }}" \
              -n "${{ inputs.aca_environment }}" \
              -l "${{ inputs.location }}"
          fi

      - name: Create or Update Container App
        env:
          RG:               ${{ inputs.resource_group }}
          ACA_ENV:          ${{ inputs.aca_environment }}
          LOCATION:         ${{ inputs.location }}
          APP_NAME:         ${{ inputs.app_name }}
          IMAGE:            ${{ inputs.image_ref }}
          INGRESS:          ${{ inputs.ingress }}
          TARGET_PORT:      ${{ inputs.target_port }}
          CPU:              ${{ inputs.cpu }}
          MEMORY:           ${{ inputs.memory }}
          MIN_REPLICAS:     ${{ inputs.min_replicas }}
          MAX_REPLICAS:     ${{ inputs.max_replicas }}
          EXTRA_ENV:        ${{ inputs.extra_env }}
        run: |
          az extension add -n containerapp --yes

          # Construye argumentos de env (-e KEY=VAL ...)
          ENV_ARGS=""
          if [ -n "${EXTRA_ENV}" ]; then
            # convierte bloque multi-linea a -e KEY=VAL repetidos
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              ENV_ARGS="${ENV_ARGS} -e ${line}"
            done <<'EOF'
${EXTRA_ENV}
EOF
          fi

          # Determina si existe la app
          if az containerapp show -g "${RG}" -n "${APP_NAME}" >/dev/null 2>&1; then
            az containerapp update \
              -g "${RG}" \
              -n "${APP_NAME}" \
              --image "${IMAGE}" \
              --ingress ${INGRESS} \
              --target-port "${TARGET_PORT}" \
              --min-replicas "${MIN_REPLICAS}" \
              --max-replicas "${MAX_REPLICAS}" \
              --cpu "${CPU}" \
              --memory "${MEMORY}" \
              ${ENV_ARGS}
          else
            az containerapp create \
              -g "${RG}" \
              -n "${APP_NAME}" \
              --environment "${ACA_ENV}" \
              --image "${IMAGE}" \
              --ingress ${INGRESS} \
              --target-port "${TARGET_PORT}" \
              --min-replicas "${MIN_REPLICAS}" \
              --max-replicas "${MAX_REPLICAS}" \
              --cpu "${CPU}" \
              --memory "${MEMORY}" \
              ${ENV_ARGS}
          fi
