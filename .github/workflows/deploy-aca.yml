name: Reusable - Deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      aca_environment:
        description: Azure Container Apps Environment name
        required: true
        type: string
      resource_group:
        description: Azure Resource Group
        required: true
        type: string
      location:
        description: Azure location (e.g. eastus)
        required: true
        type: string

      acr_name:
        description: Azure Container Registry name (short, no FQDN)
        required: true
        type: string
      acr_login_server:
        description: ACR login server (e.g. contoso.azurecr.io)
        required: true
        type: string

      app_name:
        description: Container App name
        required: true
        type: string
      image_ref:
        description: Full image reference (e.g. contoso.azurecr.io/app:tag)
        required: true
        type: string

      # Build (opcional, si quieres construir la imagen aquÃ­)
      context:
        description: Docker build context
        required: false
        type: string
        default: .
      dockerfile:
        description: Dockerfile path
        required: false
        type: string
        default: ./Dockerfile

      ingress:
        description: "Ingress: internal|external|disabled"
        required: false
        type: string
        default: internal
      target_port:
        description: Container port
        required: false
        type: string
        default: "3000"

      cpu:
        description: vCPU
        required: false
        type: string
        default: "0.25"
      memory:
        description: Memory (e.g. 0.5Gi, 1Gi)
        required: false
        type: string
        default: "0.5Gi"
      min_replicas:
        description: Min replicas
        required: false
        type: string
        default: "0"
      max_replicas:
        description: Max replicas
        required: false
        type: string
        default: "1"

      extra_env:
        description: "Multi-line KEY=VALUE list"
        required: false
        type: string
        default: ""

    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Build (optional) & Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (pipelines repo for lint jobs only)
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure providers and extension
        shell: bash
        run: |
          set -euo pipefail
          az provider register --namespace Microsoft.App --wait
          az provider register --namespace Microsoft.OperationalInsights --wait
          az extension add --name containerapp --upgrade

      - name: ACR login
        shell: bash
        run: |
          set -euo pipefail
          az acr login --name "${{ inputs.acr_name }}"

      # ----- OPCIONAL: construir y publicar imagen si quieres hacerlo en este workflow -----
      - name: Docker build & push (optional)
        if: ${{ inputs.context != '' && inputs.dockerfile != '' }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ inputs.image_ref }}
          provenance: false

      - name: Ensure ACA Environment
        shell: bash
        run: |
          set -euo pipefail
          if ! az containerapp env show \
              --name "${{ inputs.aca_environment }}" \
              --resource-group "${{ inputs.resource_group }}" >/dev/null 2>&1; then
            echo "Creating ACA Environment..."
            az containerapp env create \
              --name "${{ inputs.aca_environment }}" \
              --resource-group "${{ inputs.resource_group }}" \
              --location "${{ inputs.location }}"
          else
            echo "ACA Environment exists."
          fi

      - name: Create or Update Container App
        shell: bash
        env:
          RG: ${{ inputs.resource_group }}
          ENV_NAME: ${{ inputs.aca_environment }}
          APP_NAME: ${{ inputs.app_name }}
          IMAGE: ${{ inputs.image_ref }}
          INGRESS: ${{ inputs.ingress }}
          TARGET_PORT: ${{ inputs.target_port }}
          CPU: ${{ inputs.cpu }}
          MEMORY: ${{ inputs.memory }}
          MIN_REP: ${{ inputs.min_replicas }}
          MAX_REP: ${{ inputs.max_replicas }}
          EXTRA_ENV: ${{ inputs.extra_env }}
        run: |
          set -euo pipefail

          # Parse env vars into --env KEY=VALUE --env KEY=VALUE ...
          ENV_ARGS=()
          if [[ -n "${EXTRA_ENV}" ]]; then
            # shellcheck disable=SC2001
            while IFS= read -r line; do
              [[ -z "$line" ]] && continue
              ENV_ARGS+=( --env "$line" )
            done <<< "${EXTRA_ENV}"
          fi

          if az containerapp show --name "${APP_NAME}" --resource-group "${RG}" >/dev/null 2>&1; then
            echo "Updating existing Container App: ${APP_NAME}"
            az containerapp update \
              --name "${APP_NAME}" \
              --resource-group "${RG}" \
              --image "${IMAGE}" \
              --ingress "${INGRESS}" \
              --target-port "${TARGET_PORT}" \
              --cpu "${CPU}" \
              --memory "${MEMORY}" \
              --min-replicas "${MIN_REP}" \
              --max-replicas "${MAX_REP}" \
              "${ENV_ARGS[@]}"
          else
            echo "Creating Container App: ${APP_NAME}"
            az containerapp create \
              --name "${APP_NAME}" \
              --resource-group "${RG}" \
              --environment "${ENV_NAME}" \
              --image "${IMAGE}" \
              --ingress "${INGRESS}" \
              --target-port "${TARGET_PORT}" \
              --cpu "${CPU}" \
              --memory "${MEMORY}" \
              --min-replicas "${MIN_REP}" \
              --max-replicas "${MAX_REP}" \
              --registry-server "${{ inputs.acr_login_server }}" \
              "${ENV_ARGS[@]}"
          fi

      - name: Show Container App URL (if external)
        if: ${{ inputs.ingress == 'external' }}
        shell: bash
        run: |
          set -euo pipefail
          FQDN=$(az containerapp show -n "${{ inputs.app_name }}" -g "${{ inputs.resource_group }}" --query properties.configuration.ingress.fqdn -o tsv)
          echo "App FQDN: ${FQDN}"

# (newline intencional al final)