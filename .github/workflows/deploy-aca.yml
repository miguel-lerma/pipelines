---
name: Reusable - Deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      aca_environment:
        description: "Nombre del Azure Container Apps Environment"
        type: string
        required: true
      resource_group:
        description: "Resource group destino"
        type: string
        required: true
      location:
        description: "Región Azure (p.ej. eastus)"
        type: string
        required: true
      acr_name:
        description: "Nombre del ACR (sin .azurecr.io)"
        type: string
        required: true
      acr_login_server:
        description: "Login server del ACR (p.ej. myacr.azurecr.io)"
        type: string
        required: true
      app_name:
        description: "Nombre de la Container App"
        type: string
        required: true
      image_ref:
        description: "Tag completo de la imagen a desplegar"
        type: string
        required: true
      context:
        description: "Directorio de build context de Docker"
        type: string
        required: false
        default: "."
      dockerfile:
        description: "Ruta del Dockerfile"
        type: string
        required: false
        default: "./Dockerfile"
      ingress:
        description: "none | internal | external"
        type: string
        required: false
        default: "internal"
      target_port:
        description: "Puerto que expone el contenedor"
        type: string
        required: false
        default: "3000"
      cpu:
        description: "CPU por réplica (p.ej. 0.25)"
        type: string
        required: false
        default: "0.25"
      memory:
        description: "Memoria por réplica (p.ej. 0.5Gi)"
        type: string
        required: false
        default: "0.5Gi"
      min_replicas:
        description: "Mínimo de réplicas"
        type: string
        required: false
        default: "0"
      max_replicas:
        description: "Máximo de réplicas"
        type: string
        required: false
        default: "1"
      extra_env:
        description: "Variables de entorno (formato KEY=VAL por línea)"
        type: string
        required: false
        default: ""
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Container Apps extension
        shell: bash
        run: |
          set -euo pipefail
          az extension add -n containerapp --upgrade || az extension update -n containerapp
          az provider register --namespace Microsoft.App --wait
          az provider register --namespace Microsoft.OperationalInsights --wait

      - name: Login to ACR
        shell: bash
        run: |
          set -euo pipefail
          az acr login --name "${{ inputs.acr_name }}"

      - name: Build & Push image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ inputs.image_ref }}

      - name: Ensure ACA Environment exists
        shell: bash
        run: |
          set -euo pipefail
          if ! az containerapp env show \
            --resource-group "${{ inputs.resource_group }}" \
            --name "${{ inputs.aca_environment }}" >/dev/null 2>&1; then
            az containerapp env create \
              --resource-group "${{ inputs.resource_group }}" \
              --name "${{ inputs.aca_environment }}" \
              --location "${{ inputs.location }}"
          fi

      - name: Normalize EXTRA_ENV to CLI args
        id: envargs
        shell: bash
        run: |
          set -euo pipefail
          ENV_BLOCK="${{ inputs.extra_env }}"
          if [ -n "$ENV_BLOCK" ]; then
            # Filtra líneas vacías y arma KEY=VAL,KEY=VAL
            MAP=$(printf "%s\n" "$ENV_BLOCK" | sed '/^\s*$/d' | paste -sd, -)
            if [ -n "$MAP" ]; then
              echo "args=--set-env-vars $MAP" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi
          echo "args=" >> "$GITHUB_OUTPUT"

      - name: Create or Update Container App
        shell: bash
        run: |
          set -euo pipefail
          APP_EXISTS=false
          if az containerapp show \
              --resource-group "${{ inputs.resource_group }}" \
              --name "${{ inputs.app_name }}" >/dev/null 2>&1; then
            APP_EXISTS=true
          fi

          if [ "$APP_EXISTS" = true ]; then
            az containerapp update \
              --resource-group "${{ inputs.resource_group }}" \
              --name "${{ inputs.app_name }}" \
              --image "${{ inputs.image_ref }}" \
              --min-replicas "${{ inputs.min_replicas }}" \
              --max-replicas "${{ inputs.max_replicas }}" \
              ${{ steps.envargs.outputs.args }}
          else
            az containerapp create \
              --resource-group "${{ inputs.resource_group }}" \
              --name "${{ inputs.app_name }}" \
              --environment "${{ inputs.aca_environment }}" \
              --image "${{ inputs.image_ref }}" \
              --ingress "${{ inputs.ingress }}" \
              --target-port "${{ inputs.target_port }}" \
              --cpu "${{ inputs.cpu }}" \
              --memory "${{ inputs.memory }}" \
              --min-replicas "${{ inputs.min_replicas }}" \
              --max-replicas "${{ inputs.max_replicas }}" \
              --registry-server "${{ inputs.acr_login_server }}" \
              ${{ steps.envargs.outputs.args }}