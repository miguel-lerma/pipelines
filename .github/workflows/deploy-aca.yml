name: Reusable - Deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      # ---- Credenciales OIDC (pásalas desde el workflow del proyecto con vars.*) ----
      azure_client_id:
        description: "App registration (client) ID"
        required: true
        type: string
      azure_tenant_id:
        description: "Tenant ID"
        required: true
        type: string
      azure_subscription_id:
        description: "Subscription ID"
        required: true
        type: string

      # ---- Destino en Azure ----
      resource_group:
        required: true
        type: string
      aca_environment:
        description: "Nombre del Azure Container Apps Environment"
        required: true
        type: string
      location:
        required: true
        type: string

      # ---- App e imagen ----
      app_name:
        required: true
        type: string
      image_ref:
        description: "Ej: <acr>.azurecr.io/<repo>:<tag>"
        required: true
        type: string

      # ---- Ingress y puerto ----
      ingress:
        description: "internal | external"
        required: false
        default: internal
        type: string
      target_port:
        description: "Puerto de escucha del contenedor (string)"
        required: true
        type: string

      # ---- Escala y recursos (strings) ----
      cpu:
        required: true
        type: string
      memory:
        required: true
        type: string
      min_replicas:
        required: true
        type: string
      max_replicas:
        required: true
        type: string

      # ---- Variables de app (bloque multi-línea KEY=VAL por línea) ----
      extra_env:
        required: false
        default: ""
        type: string

      # ---- (Opcional) credenciales de registro para pull si no hay identidad configurada ----
      acr_login_server:
        required: false
        default: ""
        type: string
      acr_username:
        required: false
        default: ""
        type: string
      acr_password:
        required: false
        default: ""
        type: string

    outputs:
      app-url:
        description: "FQDN de la Container App"
        value: ${{ jobs.deploy.outputs.app-url }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      app-url: ${{ steps.get-url.outputs.url }}

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ inputs.azure_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_subscription_id }}

      - name: Ensure Container Apps extension
        run: |
          set -euo pipefail
          az extension add -n containerapp --yes
          az provider register --namespace Microsoft.App
          az provider register --namespace Microsoft.OperationalInsights

      - name: (Optional) Configure registry creds for pull
        if: ${{ inputs.acr_login_server != '' && inputs.acr_username != '' && inputs.acr_password != '' }}
        run: |
          set -euo pipefail
          # Intenta asociar credenciales de ACR a la app (si ya existe). Si no existe todavía, este paso fallaría:
          az containerapp registry set \
            -g "${{ inputs.resource_group }}" \
            -n "${{ inputs.app_name }}" \
            --server "${{ inputs.acr_login_server }}" \
            --username "${{ inputs.acr_username }}" \
            --password "${{ inputs.acr_password }}" || true

      - name: Create or Update Container App
        env:
          RG:               ${{ inputs.resource_group }}
          ACA_ENV:          ${{ inputs.aca_environment }}
          LOCATION:         ${{ inputs.location }}
          APP_NAME:         ${{ inputs.app_name }}
          IMAGE:            ${{ inputs.image_ref }}
          INGRESS:          ${{ inputs.ingress }}
          TARGET_PORT:      ${{ inputs.target_port }}
          CPU:              ${{ inputs.cpu }}
          MEMORY:           ${{ inputs.memory }}
          MIN_REPLICAS:     ${{ inputs.min_replicas }}
          MAX_REPLICAS:     ${{ inputs.max_replicas }}
          EXTRA_ENV:        ${{ inputs.extra_env }}
        run: |
          set -euo pipefail

          # Construye argumentos -e KEY=VAL desde bloque multi-línea
          ENV_ARGS=""
          if [ -n "${EXTRA_ENV:-}" ]; then
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              ENV_ARGS="${ENV_ARGS} -e ${line}"
            done <<< "${EXTRA_ENV}"
          fi

          if az containerapp show -g "${RG}" -n "${APP_NAME}" >/dev/null 2>&1; then
            az containerapp update \
              -g "${RG}" \
              -n "${APP_NAME}" \
              --image "${IMAGE}" \
              --ingress "${INGRESS}" \
              --target-port "${TARGET_PORT}" \
              --min-replicas "${MIN_REPLICAS}" \
              --max-replicas "${MAX_REPLICAS}" \
              --cpu "${CPU}" \
              --memory "${MEMORY}" \
              "${ENV_ARGS}"
          else
            az containerapp create \
              -g "${RG}" \
              -n "${APP_NAME}" \
              --environment "${ACA_ENV}" \
              --image "${IMAGE}" \
              --ingress "${INGRESS}" \
              --target-port "${TARGET_PORT}" \
              --min-replicas "${MIN_REPLICAS}" \
              --max-replicas "${MAX_REPLICAS}" \
              --cpu "${CPU}" \
              --memory "${MEMORY}" \
              "${ENV_ARGS}"
          fi

      - name: Get FQDN
        id: get-url
        run: |
          set -euo pipefail
          URL=$(az containerapp show -g "${{ inputs.resource_group }}" -n "${{ inputs.app_name }}" --query properties.configuration.ingress.fqdn -o tsv || true)
          echo "url=${URL}" >> "$GITHUB_OUTPUT"
