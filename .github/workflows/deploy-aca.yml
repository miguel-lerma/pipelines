---
name: Reusable - Deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      environment:
        description: "GitHub Environment a aplicar (dev, staging, prod, etc.)"
        type: string
        required: false

      # ---- OIDC / Azure ----
      azure_client_id:
        type: string
        required: true
      azure_tenant_id:
        type: string
        required: true
      azure_subscription_id:
        type: string
        required: true

      # ---- Destino ----
      resource_group:
        type: string
        required: true
      aca_environment:
        type: string
        required: true
      location:
        type: string
        required: true

      # ---- App e imagen ----
      app_name:
        type: string
        required: true
      image_ref:
        type: string
        required: true

      # ---- Ingress/puerto ----
      ingress:
        type: string
        required: true
      target_port:
        type: string
        required: true

      # ---- Escala/recursos ----
      cpu:
        type: string
        required: true
      memory:
        type: string
        required: true
      min_replicas:
        type: string
        required: true
      max_replicas:
        type: string
        required: true

      # ---- Opcionales ----
      extra_env:
        description: "Variables de entorno línea por línea (KEY=VALUE)"
        type: string
        required: false
      acr_login_server:
        description: "login server del ACR (opcional, para setear registry en ACA)"
        type: string
        required: false
      acr_identity_client_id:
        description: "Client ID de la identidad (UserAssigned) con permiso de pull en ACR (opcional)"
        type: string
        required: false

    secrets: {}

jobs:
  deploy:
    # Aplica el Environment si te lo pasan (habilita vars.* y protecciones)
    environment: ${{ inputs.environment || '' }}

    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repo (pipelines)
        uses: actions/checkout@v4

      # --- Lint opcional (puedes dejarlo o quitarlo si no lo quieres) ---
      - name: Write .yamllint config
        run: |
          cat > .yamllint.yml <<'CFG'
          extends: default
          rules:
            document-start:
              present: true
            line-length:
              max: 160
            trailing-spaces:
              level: error
            new-line-at-end-of-file:
              level: error
            truthy: disable
            brackets: disable
            comments: disable
            indentation: disable
          CFG

      - name: yamllint (YAML format)
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .github/workflows
          format: github
          strict: true
          no_warnings: false

      - name: actionlint (GHA syntax)
        uses: rhysd/actionlint@v1.6.27

      # --- Login Azure con OIDC ---
      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ inputs.azure_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_subscription_id }}

      - name: Ensure ACA Env exists (no-op if exists)
        shell: bash
        run: |
          set -euo pipefail
          az group show -n "${{ inputs.resource_group }}" >/dev/null 2>&1 || {
            echo "Resource group '${{ inputs.resource_group }}' no existe. Creándolo…"
            az group create -n "${{ inputs.resource_group }}" -l "${{ inputs.location }}"
          }

          # Crea el ACA Environment si no existe (silent si ya existe)
          if ! az containerapp env show \
            -g "${{ inputs.resource_group }}" \
            -n "${{ inputs.aca_environment }}" >/dev/null 2>&1; then
            echo "Creando Azure Container Apps Environment '${{ inputs.aca_environment }}'…"
            az containerapp env create \
              -g "${{ inputs.resource_group }}" \
              -n "${{ inputs.aca_environment }}" \
              -l "${{ inputs.location }}"
          else
            echo "ACA Environment '${{ inputs.aca_environment }}' ya existe."
          fi

      - name: Build env var block
        id: envblk
        shell: bash
        run: |
          set -euo pipefail
          # Convierte el bloque extra_env (KEY=VALUE por línea) en parámetros --env para az
          PARAMS=()
          if [[ -n "${{ inputs.extra_env }}" ]]; then
            while IFS= read -r line; do
              [[ -z "$line" ]] && continue
              # Split en el primer '='
              key="${line%%=*}"
              val="${line#*=}"
              # Trim espacios
              key="$(echo "$key" | xargs)"
              val="$(echo "$val" | xargs)"
              [[ -z "$key" ]] && continue
              PARAMS+=( --env "$key=$val" )
            done <<< "${{ inputs.extra_env }}"
          fi

          # Exporta como output serializado (espacios seguros)
          printf '%s\0' "${PARAMS[@]}" > envparams.bin
          echo "file=envparams.bin" >> "$GITHUB_OUTPUT"

      - name: Create/Update Container App
        shell: bash
        run: |
          set -euo pipefail

          # Recupera los --env serializados
          readarray -d '' ENV_PARAMS < "${{ steps.envblk.outputs.file }}"

          # Si nos pasaron registry, lo añadimos (opcional)
          if [[ -n "${{ inputs.acr_login_server }}" ]]; then
            echo "Configurando registry ${{
              inputs.acr_login_server
            }} en la app (si no existiera aún)…"
            # Nota: requiere identidad con permiso AcrPull en el ACR si se usa identidad asignada
            if [[ -n "${{ inputs.acr_identity_client_id }}" ]]; then
              az containerapp registry set \
                -g "${{ inputs.resource_group }}" \
                -n "${{ inputs.app_name }}" \
                --server "${{ inputs.acr_login_server }}" \
                --identity "${{ inputs.acr_identity_client_id }}" \
                --yes || true
            else
              az containerapp registry set \
                -g "${{ inputs.resource_group }}" \
                -n "${{ inputs.app_name }}" \
                --server "${{ inputs.acr_login_server }}" \
                --yes || true
            fi
          fi

          # Crea/actualiza la Container App
          if ! az containerapp show -g "${{ inputs.resource_group }}" -n "${{ inputs.app_name }}" >/dev/null 2>&1; then
            echo "Creando Container App '${{ inputs.app_name }}'…"
            az containerapp create \
              -g "${{ inputs.resource_group }}" \
              -n "${{ inputs.app_name }}" \
              --environment "${{ inputs.aca_environment }}" \
              --image "${{ inputs.image_ref }}" \
              --ingress "${{ inputs.ingress }}" \
              --target-port "${{ inputs.target_port }}" \
              --cpu "${{ inputs.cpu }}" \
              --memory "${{ inputs.memory }}" \
              --min-replicas "${{ inputs.min_replicas }}" \
              --max-replicas "${{ inputs.max_replicas }}" \
              "${ENV_PARAMS[@]}"
          else
            echo "Actualizando Container App '${{ inputs.app_name }}'…"
            az containerapp update \
              -g "${{ inputs.resource_group }}" \
              -n "${{ inputs.app_name }}" \
              --image "${{ inputs.image_ref }}" \
              --ingress "${{ inputs.ingress }}" \
              --target-port "${{ inputs.target_port }}" \
              --cpu "${{ inputs.cpu }}" \
              --memory "${{ inputs.memory }}" \
              --min-replicas "${{ inputs.min_replicas }}" \
              --max-replicas "${{ inputs.max_replicas }}" \
              "${ENV_PARAMS[@]}"
          fi

          echo "Despliegue completado."
