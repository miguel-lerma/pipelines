---
name: Reusable - Deploy ACA

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      commit_sha:
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  # ====== IDs Azure centralizados (OIDC SP) ======
  AZURE_CLIENT_ID: d986d4dd-0537-4052-9ab0-1e0dbf02e43b
  AZURE_TENANT_ID: a3907a6d-bbd7-425a-9e46-d06e8a173ba6
  AZURE_SUBSCRIPTION_ID: a7fb9745-e74d-4e51-b7da-75b90a77b7fd

  # ====== Parámetros de la app/infra ======
  RESOURCE_GROUP: ITX-RG-01
  ACA_ENVIRONMENT: env-lab-aca
  LOCATION: eastus
  APP_NAME: be-dev

  # ====== ACR ======
  ACR_LOGIN_SERVER: itxzacrlab01.azurecr.io    # <nombre>.azurecr.io
  ACR_REPOSITORY: archetype-back               # repo donde CI empuja las imágenes (sin registry)
  ACR_PULL_IDENTITY: system                    # usa la identidad 'system' de la ACA para hacer pull

jobs:
  deploy:
    name: Deploy ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout (repo que llama)
        uses: actions/checkout@v4

      - name: Login to Azure with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Azure CLI version & install containerapp extension
        shell: bash
        run: |
          set -euo pipefail
          az version
          if ! az extension show --name containerapp >/dev/null 2>&1; then
            az extension add --name containerapp -y
          else
            # Si falla el update no queremos romper el deploy
            az extension update --name containerapp -y || true
          fi

      - name: Sanity checks (RG, ACA env, App, ACR)
        env:
          RG: ${{ env.RESOURCE_GROUP }}
          ACA_ENV: ${{ env.ACA_ENVIRONMENT }}
          APP: ${{ env.APP_NAME }}
          ACR_LOGIN: ${{ env.ACR_LOGIN_SERVER }}
        shell: bash
        run: |
          set -euo pipefail
          # RG y recursos deben existir (esto falla si no existen)
          az group show -n "$RG" -o none
          az containerapp env show -g "$RG" -n "$ACA_ENV" -o none
          az containerapp show -g "$RG" -n "$APP" -o none

          # Validar ACR
          ACR_NAME="$ACR_LOGIN"
          ACR_NAME="${ACR_NAME%%.*}"  # itxzacrlab01
          az acr show -n "$ACR_NAME" -o none

      - name: Configurar credenciales del ACR en la ACA (con MI)
        env:
          RG: ${{ env.RESOURCE_GROUP }}
          APP: ${{ env.APP_NAME }}
          ACR_LOGIN: ${{ env.ACR_LOGIN_SERVER }}
          ACR_PULL_IDENTITY: ${{ env.ACR_PULL_IDENTITY }}
        shell: bash
        run: |
          set -euo pipefail
          # Nota: no usar --yes (no existe en este comando)
          # --identity admite 'system' o el clientId de una UAI.
          az containerapp registry set \
            -g "$RG" -n "$APP" \
            --server "$ACR_LOGIN" \
            --identity "$ACR_PULL_IDENTITY" || true

      - name: Deploy (az containerapp update --image)
        env:
          RG: ${{ env.RESOURCE_GROUP }}
          APP: ${{ env.APP_NAME }}
          ACR_LOGIN: ${{ env.ACR_LOGIN_SERVER }}
          REPO: ${{ env.ACR_REPOSITORY }}
          SHA: ${{ inputs.commit_sha }}
        shell: bash
        run: |
          set -euo pipefail

          IMAGE_TAG="sha-${SHA}"
          IMAGE_REF="${ACR_LOGIN}/${REPO}:${IMAGE_TAG}"

          echo "Usando imagen: ${IMAGE_REF}"

          PARAMS=( -g "$RG" -n "$APP" --image "$IMAGE_REF" )

          # Si necesitas parámetros opcionales (ingress/ports/recursos), añade
          # variables de entorno y descomenta estas líneas de ejemplo:
          # [ -n "${INGRESS:-}" ]      && PARAMS+=( --ingress "$INGRESS" )
          # [ -n "${TARGET_PORT:-}" ]  && PARAMS+=( --target-port "$TARGET_PORT" )
          # [ -n "${CPU:-}" ]          && PARAMS+=( --cpu "$CPU" )
          # [ -n "${MEMORY:-}" ]       && PARAMS+=( --memory "$MEMORY" )
          # [ -n "${MIN_REPLICAS:-}" ] && PARAMS+=( --min-replicas "$MIN_REPLICAS" )
          # [ -n "${MAX_REPLICAS:-}" ] && PARAMS+=( --max-replicas "$MAX_REPLICAS" )
          # if [ -n "${EXTRA_ENV:-}" ]; then
          #   while IFS= read -r line; do
          #     [ -z "$line" ] && continue
          #     PARAMS+=( --set-env-vars "$line" )
          #   done <<< "$EXTRA_ENV"
          # fi

          az containerapp update "${PARAMS[@]}"
          echo "✅ Deploy completado."
