---
name: Reusable - Deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      environment:
        description: "GitHub Environment a aplicar (dev, qa, prod, etc.)"
        type: string
        required: true

      # ---- OIDC / Azure ----
      azure_client_id:
        type: string
        required: true
      azure_tenant_id:
        type: string
        required: true
      azure_subscription_id:
        type: string
        required: true

      # ---- Destino ----
      resource_group:
        type: string
        required: true
      aca_environment:
        type: string
        required: true
      location:
        type: string
        required: true

      # ---- App e imagen ----
      app_name:
        type: string
        required: true
      image_ref:
        type: string
        required: true

      # ---- Ingress/puerto (OPCIONALES) ----
      ingress:
        type: string
        required: false
      target_port:
        type: string
        required: false

      # ---- Escala/recursos (OPCIONALES) ----
      cpu:
        type: string
        required: false
      memory:
        type: string
        required: false
      min_replicas:
        type: string
        required: false
      max_replicas:
        type: string
        required: false

      # ---- Opcionales ----
      extra_env:
        description: "Variables de entorno línea por línea (KEY=VALUE)"
        type: string
        required: false
      acr_login_server:
        description: "Login server del ACR (opcional, para setear registry en ACA)"
        type: string
        required: false
      acr_identity_client_id:
        description: "Client ID de la identidad (UserAssigned) con permiso de pull en ACR (opcional)"
        type: string
        required: false

    secrets: {}

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    concurrency:
      group: aca-${{ inputs.app_name }}-${{ inputs.environment }}
      cancel-in-progress: true

    steps:
      - name: Checkout repo (caller)
        uses: actions/checkout@v4

      - name: Write .yamllint config
        run: |
          cat > .yamllint.yml <<'CFG'
          extends: default
          rules:
            document-start: { present: true }
            trailing-spaces: { level: error }
            new-line-at-end-of-file: { level: error }
            colons: disable
            braces: disable
            line-length: disable
            truthy: disable
            brackets: disable
            comments: disable
            indentation: disable
          CFG

      - name: yamllint (YAML format)
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .github/workflows
          format: github
          strict: true
          no_warnings: false

      - name: actionlint (GHA syntax)
        uses: rhysd/actionlint@v1.6.27
        with:
          shellcheck: false

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ inputs.azure_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_subscription_id }}

      - name: Ensure Azure CLI containerapp extension
        run: |
          set -euo pipefail
          if ! az extension show --name containerapp >/dev/null 2>&1; then
            az extension add --name containerapp -y
          else
            az extension update --name containerapp -y || true
          fi

      - name: Validate existing infra (no mutations)
        env:
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          ACA_ENVIRONMENT: ${{ inputs.aca_environment }}
          LOCATION: ${{ inputs.location }}
          APP_NAME: ${{ inputs.app_name }}
          ACR_LOGIN_SERVER: ${{ inputs.acr_login_server }}
        run: |
          set -euo pipefail
          : "${RESOURCE_GROUP:?missing input 'resource_group'}"
          : "${ACA_ENVIRONMENT:?missing input 'aca_environment'}"
          : "${LOCATION:?missing input 'location'}"
          : "${APP_NAME:?missing input 'app_name'}"
          az group show -n "$RESOURCE_GROUP" -o none
          az containerapp env show -g "$RESOURCE_GROUP" -n "$ACA_ENVIRONMENT" -o none
          az containerapp show -g "$RESOURCE_GROUP" -n "$APP_NAME" -o none
          if [[ -n "${ACR_LOGIN_SERVER:-}" ]]; then
            ACR_NAME="${ACR_LOGIN_SERVER%%.*}"
            az acr show -n "$ACR_NAME" -o none
          fi

      - name: Build env var block
        id: envblk
        run: |
          set -euo pipefail
          PARAMS=()
          if [[ -n "${{ inputs.extra_env }}" ]]; then
            while IFS= read -r line; do
              [[ -z "$line" ]] && continue
              PARAMS+=( --set-env-vars "$line" )
            done <<< "${{ inputs.extra_env }}"
          fi
          printf '%s\0' "${PARAMS[@]}" > envparams.bin
          echo "file=envparams.bin" >> "$GITHUB_OUTPUT"

      - name: Update existing Container App
        env:
          RESOURCE_GROUP: ${{ inputs.resource_group }}
          APP_NAME: ${{ inputs.app_name }}
          IMAGE_REF: ${{ inputs.image_ref }}
          INGRESS: ${{ inputs.ingress }}
          TARGET_PORT: ${{ inputs.target_port }}
          CPU: ${{ inputs.cpu }}
          MEMORY: ${{ inputs.memory }}
          MIN_REPLICAS: ${{ inputs.min_replicas }}
          MAX_REPLICAS: ${{ inputs.max_replicas }}
          ACR_LOGIN_SERVER: ${{ inputs.acr_login_server }}
          ACR_IDENTITY_CLIENT_ID: ${{ inputs.acr_identity_client_id }}
        run: |
          set -euo pipefail
          readarray -d '' ENV_PARAMS < "${{ steps.envblk.outputs.file }}"

          if [[ -n "${ACR_LOGIN_SERVER:-}" ]]; then
            if [[ -n "${ACR_IDENTITY_CLIENT_ID:-}" ]]; then
              az containerapp registry set \
                -g "$RESOURCE_GROUP" -n "$APP_NAME" \
                --server "$ACR_LOGIN_SERVER" \
                --identity "$ACR_IDENTITY_CLIENT_ID" \
                --yes || true
            else
              az containerapp registry set \
                -g "$RESOURCE_GROUP" -n "$APP_NAME" \
                --server "$ACR_LOGIN_SERVER" \
                --yes || true
            fi
          fi

          PARAMS=( -g "$RESOURCE_GROUP" -n "$APP_NAME" --image "$IMAGE_REF" )
          [[ -n "${INGRESS:-}" ]] && PARAMS+=( --ingress "$INGRESS" )
          [[ -n "${TARGET_PORT:-}" ]] && PARAMS+=( --target-port "$TARGET_PORT" )
          [[ -n "${CPU:-}" ]] && PARAMS+=( --cpu "$CPU" )
          [[ -n "${MEMORY:-}" ]] && PARAMS+=( --memory "$MEMORY" )
          [[ -n "${MIN_REPLICAS:-}" ]] && PARAMS+=( --min-replicas "$MIN_REPLICAS" )
          [[ -n "${MAX_REPLICAS:-}" ]] && PARAMS+=( --max-replicas "$MAX_REPLICAS" )
          if [[ ${#ENV_PARAMS[@]} -gt 0 ]]; then
            PARAMS+=( "${ENV_PARAMS[@]}" )
          fi

          az containerapp update "${PARAMS[@]}"
          echo "✅ Despliegue (update) completado."
