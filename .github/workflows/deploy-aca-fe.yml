---
name: CD - Deploy Frontend to Azure Container Apps (Reusable)

on:
  workflow_call:
    inputs:
      environment:
        description: "dev | qa | prd"
        required: true
        type: string
      resource_group:
        required: true
        type: string
      location:
        required: true
        type: string
      aca_env:
        required: true
        type: string
      aca_fe_name:
        required: true
        type: string
      aca_be_name:
        required: true
        type: string
      registry_login_server:
        description: "p.ej. itxzacrlab01.azurecr.io"
        required: true
        type: string
      image_repo:
        description: "nombre del repo de imagen en ACR, p.ej. archetype-front"
        required: true
        type: string
      sha:
        description: "sha del commit que taggeó la imagen: sha-<40>"
        required: true
        type: string
      ingress:
        default: external
        type: string
      target_port:
        default: "80"
        type: string
      cpu:
        default: "0.25"
        type: string
      memory:
        default: "0.5Gi"
        type: string
      min_replicas:
        default: "1"
        type: string
      max_replicas:
        default: "1"
        type: string
      app_env:
        description: "APP_ENV para FE (dev|qa|production)"
        required: true
        type: string

permissions:
  id-token: write
  contents: read

concurrency:
  group: cd-fe-${{ inputs.environment }}-${{ inputs.sha }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy FE → ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          environment: azurecloud
          allow-no-subscriptions: false
          audience: api://AzureADTokenExchange

      - name: Variables comunes (image ref / ACR name)
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          REGISTRY="${{ inputs.registry_login_server }}"
          IMAGE_REPO="${{ inputs.image_repo }}"
          SHA="${{ inputs.sha }}"

          IMAGE_REF="${REGISTRY}/${IMAGE_REPO}:sha-${SHA}"
          ACR_NAME="${REGISTRY%%.azurecr.io}"

          {
            echo "REGISTRY=${REGISTRY}"
            echo "IMAGE_REF=${IMAGE_REF}"
            echo "ACR_NAME=${ACR_NAME}"
          } >> "$GITHUB_OUTPUT"

      - name: Ensure containerapp extension
        uses: azure/CLI@v2
        with:
          inlineScript: az extension add -n containerapp --upgrade || true

      - name: Preflight (RG / Env / FE app opcional)
        shell: bash
        run: |
          set -euo pipefail
          az group show -n "${{ inputs.resource_group }}" -o none
          az containerapp env show -g "${{ inputs.resource_group }}" -n "${{ inputs.aca_env }}" -o none || \
          az containerapp env create -g "${{ inputs.resource_group }}" -n "${{ inputs.aca_env }}" -l "${{ inputs.location }}" -o none

      - name: Resolver FQDN interno del BE
        id: be
        shell: bash
        run: |
          set -euo pipefail
          FQDN="$(az containerapp show \
            -g "${{ inputs.resource_group }}" \
            -n "${{ inputs.aca_be_name }}" \
            --query "properties.configuration.ingress.fqdn" -o tsv || true)"

          if [[ -z "${FQDN}" || "${FQDN}" != *".internal."* ]]; then
            echo "El backend '${{ inputs.aca_be_name }}' no tiene FQDN interno (ingress=internal). FQDN='${FQDN:-<vacio>}'" >&2
            exit 1
          fi

          {
            echo "API_INTERNAL=https://${FQDN}"
          } >> "$GITHUB_OUTPUT"

      - name: Ensure MI + AcrPull + Registry binding
        shell: bash
        run: |
          set -euo pipefail
          RG="${{ inputs.resource_group }}"
          APP="${{ inputs.aca_fe_name }}"
          ACR_NAME="${{ steps.meta.outputs.ACR_NAME }}"
          ACR_ID="$(az acr show -n "${ACR_NAME}" -g "${RG}" --query id -o tsv)"

          if az containerapp show -g "${RG}" -n "${APP}" >/dev/null 2>&1; then
            MI="$(az containerapp show -g "${RG}" -n "${APP}" --query "identity.principalId" -o tsv)"
            if [[ -z "${MI}" || "${MI}" == "None" ]]; then
              az containerapp identity assign -g "${RG}" -n "${APP}" --system-assigned -o none
              MI="$(az containerapp show -g "${RG}" -n "${APP}" --query "identity.principalId" -o tsv)"
            fi

            HAS_ROLE="$(az role assignment list --assignee "${MI}" --role "AcrPull" --scope "${ACR_ID}" --query "length(@)" -o tsv)"
            if [[ "${HAS_ROLE}" == "0" ]]; then
              az role assignment create --assignee "${MI}" --role "AcrPull" --scope "${ACR_ID}" -o none
            fi

            az containerapp registry set \
              -g "${RG}" -n "${APP}" \
              --server "${{ steps.meta.outputs.REGISTRY }}" \
              --identity system -o none || true
          fi

      - name: Create or Update FE (ACA)
        env:
          IMG: ${{ steps.meta.outputs.IMAGE_REF }}
          RG: ${{ inputs.resource_group }}
          ACA_ENV: ${{ inputs.aca_env }}
          APP: ${{ inputs.aca_fe_name }}
          INGRESS: ${{ inputs.ingress }}
          TARGET_PORT: ${{ inputs.target_port }}
          CPU: ${{ inputs.cpu }}
          MEM: ${{ inputs.memory }}
          MIN: ${{ inputs.min_replicas }}
          MAX: ${{ inputs.max_replicas }}
          APP_ENV: ${{ inputs.app_env }}
          API_INTERNAL: ${{ steps.be.outputs.API_INTERNAL }}
        shell: bash
        run: |
          set -euo pipefail
          # Variables que usa Nginx (template). OJO: una sola línea para contentar a yamllint
          ENV_VARS="APP_ENV=${APP_ENV} PORT=${TARGET_PORT} API_BASE_URL_INTERNAL=${API_INTERNAL} api_base_url_internal=${API_INTERNAL}"

          if ! az containerapp show -g "${RG}" -n "${APP}" >/dev/null 2>&1; then
            az containerapp create \
              -g "${RG}" -n "${APP}" \
              --environment "${ACA_ENV}" \
              --image "${IMG}" \
              --ingress "${INGRESS}" --target-port "${TARGET_PORT}" \
              --registry-server "${{ steps.meta.outputs.REGISTRY }}" \
              --registry-identity system \
              --system-assigned \
              --cpu "${CPU}" --memory "${MEM}" \
              --min-replicas "${MIN}" --max-replicas "${MAX}" \
              --env-vars "${ENV_VARS}"
          else
            # NOTA: algunos az CLI antiguos no aceptan --ingress/--target-port en UPDATE
            az containerapp update \
              -g "${RG}" -n "${APP}" \
              --image "${IMG}" \
              --cpu "${CPU}" --memory "${MEM}" \
              --min-replicas "${MIN}" --max-replicas "${MAX}" \
              --set-env-vars "${ENV_VARS}"
          fi

      - name: FE public URL
        shell: bash
        run: |
          set -euo pipefail
          FQDN="$(az containerapp show -g "${{ inputs.resource_group }}" -n "${{ inputs.aca_fe_name }}" --query "properties.configuration.ingress.fqdn" -o tsv)"
          echo "FQDN=${FQDN}" >> "$GITHUB_OUTPUT"
          echo "FE: https://${FQDN}"

      # --------- SMOKE TESTS ----------
      - name: Smoke test → FE home (/)
        shell: bash
        run: |
          set -euo pipefail
          FQDN="${{ steps.url.outputs.FQDN }}"
          for i in {1..10}; do
            code="$(curl -fsS -o /dev/null -w "%{http_code}" "https://${FQDN}/" || true)"
            if [ "$code" = "200" ] || [ "$code" = "304" ]; then
              echo "Home OK ($code)"
              exit 0
            fi
            echo "Intento $i: aún no está listo (code=$code). Reintentando..."
            sleep 6
          done
          echo "Fallo: / no respondió 200/304" >&2
          exit 1

      - name: Smoke test → FE proxy a BE (/api/health)
        shell: bash
        run: |
          set -euo pipefail
          FQDN="${{ steps.url.outputs.FQDN }}"
          for i in {1..10}; do
            code="$(curl -fsS -o /dev/null -w "%{http_code}" "https://${FQDN}/api/health" || true)"
            if [ "$code" = "200" ]; then
              echo "/api/health OK (200)"
              exit 0
            fi
            echo "Intento $i: /api/health = $code. Reintentando..."
            sleep 6
          done
          echo "Fallo: /api/health no respondió 200" >&2
          exit 1
