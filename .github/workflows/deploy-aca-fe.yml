---
name: Reusable - Deploy Frontend to Azure Container Apps

on:
  workflow_call:
    inputs:
      # Infra / destino
      environment:
        required: true
        type: string            # dev | qa | prd
      resource_group:
        required: true
        type: string
      location:
        required: true
        type: string
      aca_environment:
        required: true
        type: string
      fe_app_name:
        required: true
        type: string
      be_app_name:
        required: true
        type: string

      # Imagen
      registry:                 # p.ej. itxzacrlab01.azurecr.io
        required: true
        type: string
      image_repo:               # p.ej. archetype-front
        required: true
        type: string
      sha:                      # commit sha que viene del CI (opcional)
        required: false
        type: string

      # Runtime
      ingress:
        default: external
        type: string
      target_port:
        default: 80
        type: number
      cpu:
        default: "0.25"
        type: string
      memory:
        default: "0.5Gi"
        type: string
      min_replicas:
        default: "0"
        type: string
      max_replicas:
        default: "1"
        type: string
      app_env:
        required: true
        type: string            # dev | qa | production

    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy FE â†’ ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout (caller repo)
        uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure containerapp extension
        uses: azure/CLI@v2
        with:
          inlineScript: |
            az extension add -n containerapp --upgrade || true

      - name: Compute image ref & vars
        id: meta
        shell: bash
        run: |
          set -euo pipefail

          # Tag de imagen basado en el SHA recibido (o el propio de este run)
          SHA_IN="${{ inputs.sha }}"
          if [ -z "${SHA_IN}" ] || [ "${SHA_IN}" = "null" ]; then
            SHA_IN="${GITHUB_SHA}"
          fi
          TAG="sha-${SHA_IN}"

          REGISTRY="${{ inputs.registry }}"
          IMAGE_REPO="${{ inputs.image_repo }}"
          IMG="${REGISTRY}/${IMAGE_REPO}:${TAG}"

          echo "sha=${SHA_IN}"   >> "$GITHUB_OUTPUT"
          echo "tag=${TAG}"      >> "$GITHUB_OUTPUT"
          echo "image=${IMG}"    >> "$GITHUB_OUTPUT"

      - name: Resolve BE internal FQDN
        id: be
        shell: bash
        run: |
          set -euo pipefail
          RG="${{ inputs.resource_group }}"
          BE="${{ inputs.be_app_name }}"
          FQDN=$(az containerapp show -g "${RG}" -n "${BE}" --query "properties.configuration.ingress.fqdn" -o tsv || true)

          if [[ -z "${FQDN}" || "${FQDN}" != *".internal."* ]]; then
            echo "ERROR: el backend '${BE}' no tiene FQDN interno (ingress=internal). FQDN='${FQDN:-<empty>}'" >&2
            exit 1
          fi
          echo "api_internal=https://${FQDN}" >> "$GITHUB_OUTPUT"

      - name: Ensure MI + registry binding (AcrPull)
        shell: bash
        run: |
          set -euo pipefail
          RG="${{ inputs.resource_group }}"
          APP="${{ inputs.fe_app_name }}"
          REGISTRY="${{ inputs.registry }}"

          # Derivar ACR_NAME de REGISTRY sin usar expresiones de GitHub
          ACR_NAME="${REGISTRY%.azurecr.io}"

          # Obtener el ID del ACR para el scope del rol
          ACR_ID=$(az acr show -n "${ACR_NAME}" -g "${RG}" --query id -o tsv)

          # Si existe la app, asegurar identidad y rol
          if az containerapp show -g "${RG}" -n "${APP}" >/dev/null 2>&1; then
            MI=$(az containerapp show -g "${RG}" -n "${APP}" --query "identity.principalId" -o tsv)
            if [ -z "${MI}" ] || [ "${MI}" = "None" ]; then
              az containerapp identity assign -g "${RG}" -n "${APP}" --system-assigned >/dev/null
              MI=$(az containerapp show -g "${RG}" -n "${APP}" --query "identity.principalId" -o tsv)
            fi
            HAS=$(az role assignment list --assignee "${MI}" --role "AcrPull" --scope "${ACR_ID}" --query "length(@)" -o tsv)
            [ "${HAS}" != "0" ] || az role assignment create --assignee "${MI}" --role "AcrPull" --scope "${ACR_ID}" >/dev/null

            # Bind del registry
            az containerapp registry set -g "${RG}" -n "${APP}" \
              --server "${REGISTRY}" --identity system >/dev/null
          fi

      - name: Create or Update FE (ACA)
        env:
          IMG: ${{ steps.meta.outputs.image }}
          RG: ${{ inputs.resource_group }}
          ACA_ENV: ${{ inputs.aca_environment }}
          APP: ${{ inputs.fe_app_name }}
          INGRESS: ${{ inputs.ingress }}
          TARGET_PORT: ${{ inputs.target_port }}
          CPU: ${{ inputs.cpu }}
          MEM: ${{ inputs.memory }}
          MIN: ${{ inputs.min_replicas }}
          MAX: ${{ inputs.max_replicas }}
          APP_ENV: ${{ inputs.app_env }}
          API_INTERNAL: ${{ steps.be.outputs.api_internal }}
          REGISTRY: ${{ inputs.registry }}
        shell: bash
        run: |
          set -euo pipefail

          ENV_VARS="APP_ENV=${APP_ENV} PORT=${TARGET_PORT} API_BASE_URL_INTERNAL=${API_INTERNAL}"

          if ! az containerapp show -g "$RG" -n "$APP" >/dev/null 2>&1; then
            az containerapp create \
              -g "$RG" -n "$APP" \
              --environment "$ACA_ENV" \
              --image "$IMG" \
              --ingress "$INGRESS" --target-port "$TARGET_PORT" \
              --registry-server "$REGISTRY" \
              --registry-identity system \
              --system-assigned \
              --cpu "$CPU" --memory "$MEM" \
              --min-replicas "$MIN" --max-replicas "$MAX" \
              --env-vars $ENV_VARS
          else
            az containerapp update \
              -g "$RG" -n "$APP" \
              --image "$IMG" \
              --ingress "$INGRESS" --target-port "$TARGET_PORT" \
              --cpu "$CPU" --memory "$MEM" \
              --min-replicas "$MIN" --max-replicas "$MAX" \
              --set-env-vars $ENV_VARS
          fi

      - name: FE public URL
        shell: bash
        run: |
          az containerapp show -g "${{ inputs.resource_group }}" -n "${{ inputs.fe_app_name }}" \
            --query "properties.configuration.ingress.fqdn" -o tsv
