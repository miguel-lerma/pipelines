---
name: Reusable - Build & Push Docker Image

on:
  workflow_call:
    inputs:
      app_dir:
        type: string
        required: true
        description: "Directorio de la app donde está el Dockerfile"
      dockerfile:
        type: string
        required: false
        default: "Dockerfile"
      image_name:
        type: string
        required: true
        description: "Nombre del repo en ACR (p.ej. archetype-back)"
      acr_login_server:
        type: string
        required: true
        description: "p.ej. itxzacrlab01.azurecr.io"
      environment_tag:
        type: string
        required: false
        default: ""
        description: "dev|staging|prod para tag móvil <env>-latest (opcional)"
      build_args:
        type: string
        required: false
        default: ""
        description: "args opcionales: una por línea KEY=VALUE"

      # OIDC / Azure
      azure_client_id:
        type: string
        required: true
      azure_tenant_id:
        type: string
        required: true
      azure_subscription_id:
        type: string
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ inputs.azure_client_id }}
          tenant-id: ${{ inputs.azure_tenant_id }}
          subscription-id: ${{ inputs.azure_subscription_id }}

      - name: ACR login (az acr login)
        run: |
          az acr login --name "${{ inputs.acr_login_server%%.* }}"

      - name: Build args → matriz
        id: args
        shell: bash
        run: |
          arr=()
          if [[ -n "${{ inputs.build_args }}" ]]; then
            while IFS= read -r line; do
              [[ -z "$line" ]] && continue
              arr+=( --build-arg "$line" )
            done <<< "${{ inputs.build_args }}"
          fi
          printf '%s\0' "${arr[@]}" > args.bin
          echo "file=args.bin" >> "$GITHUB_OUTPUT"

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute tags
        id: meta
        shell: bash
        run: |
          IMAGE="${{ inputs.acr_login_server }}/${{ inputs.image_name }}"
          SHA_TAG="sha-${GITHUB_SHA}"
          TAGS="${IMAGE}:${SHA_TAG}"
          if [[ -n "${{ inputs.environment_tag }}" ]]; then
            TAGS="${TAGS},${IMAGE}:${{ inputs.environment_tag }}-latest"
          fi
          echo "tags=$TAGS" >> "$GITHUB_OUTPUT"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Docker build & push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.app_dir }}
          file: ${{ inputs.app_dir }}/${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          provenance: false
          sbom: false
          build-args-file: ${{ steps.args.outputs.file }}

      - name: Summary
        run: |
          echo "## Image pushed" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ steps.meta.outputs.image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**:  ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
