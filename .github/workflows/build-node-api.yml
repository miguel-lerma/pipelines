---
name: Build Node API

on:
  workflow_call:
    inputs:
      app_dir:
        type: string
        required: true
        description: 'Directorio de la app (raíz del package.json)'
      node_version:
        type: string
        required: false
        description: 'Fallback si no hay .nvmrc (ej: "20.x")'
      run_lint:
        type: boolean
        default: true
      run_test:
        type: boolean
        default: true
      run_build:
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Detecta si existe .nvmrc y expone outputs
      - name: Detect Node version source
        id: detect-node
        env:
          FALLBACK: ${{ inputs.node_version != '' && inputs.node_version || '20.x' }}
        run: |
          APP="${{ inputs.app_dir }}"
          if [ -f "$APP/.nvmrc" ]; then
            echo "use_nvmrc=true" >> "$GITHUB_OUTPUT"
            echo "nvmrc_path=$APP/.nvmrc" >> "$GITHUB_OUTPUT"
          else
            echo "use_nvmrc=false" >> "$GITHUB_OUTPUT"
            echo "node_version=${FALLBACK}" >> "$GITHUB_OUTPUT"
          fi

      # Caso 1: usa .nvmrc
      - name: Setup Node via .nvmrc
        if: ${{ steps.detect-node.outputs.use_nvmrc == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ steps.detect-node.outputs.nvmrc_path }}
          cache: npm
          cache-dependency-path: ${{ inputs.app_dir }}/package-lock.json

      # Caso 2: usa versión fallback
      - name: Setup Node via fallback
        if: ${{ steps.detect-node.outputs.use_nvmrc != 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.detect-node.outputs.node_version }}
          cache: npm
          cache-dependency-path: ${{ inputs.app_dir }}/package-lock.json

      - name: NPM CI
        working-directory: ${{ inputs.app_dir }}
        run: npm ci

      - name: Lint
        if: ${{ inputs.run_lint }}
        working-directory: ${{ inputs.app_dir }}
        run: npm run lint --if-present

      - name: Test
        if: ${{ inputs.run_test }}
        working-directory: ${{ inputs.app_dir }}
        run: npm test --if-present -- --ci

      - name: Build
        if: ${{ inputs.run_build }}
        working-directory: ${{ inputs.app_dir }}
        run: npm run build --if-present

      - name: Summary
        if: always()
        shell: bash
        run: |
          {
            echo "## Node build summary"
            echo
            echo "- **Node**: $(node -v 2>/dev/null || echo 'n/a')"
            echo "- **NPM**:  $(npm -v 2>/dev/null || echo 'n/a')"
            echo "- **Dir**:  \`${{ inputs.app_dir }}\`"
            echo "- **Lint**: ${{ inputs.run_lint }}"
            echo "- **Test**: ${{ inputs.run_test }}"
            echo "- **Build**: ${{ inputs.run_build }}"
            echo "- **Fuente versión**: $([ '${{ steps.detect-node.outputs.use_nvmrc }}' = 'true' ] && echo '.nvmrc' || echo '${{ steps.detect-node.outputs.node_version }}')"
          } >> "$GITHUB_STEP_SUMMARY"
